Система аутентификация
======================
Система аутентификации нужна, чтобы определять, что за пользователь пытается получить доступ
к определённому ресурсу, и имеются ли у него полномочия на совершения данного действия. Для аутентификации используется
JWT (JSON Web Token) - веб-токен, передаваемый в формате JSON. JWT состоит из двух токенов:

* Access Token - основной токен, который нужен для аутентификации.
    * Передаётся в заголовке HTTP-запроса.
    * Имеет короткий срок действия.
* Refresh Token - токен, который нужен для обновления Access Token.
    * Имеет больший срок действия.
    * Когда становится просроченным, нужно отправлять POST запрос №1, чтобы создать новую пару токенов.

Endpoints
---------
Для реализации системы аутентификации используется пакет Djoser, который использует пакет
rest_framework_simplejwt и предоставляет эндпоинты для JWT:

1. Создание JWT токена.
2. Обновление JWT токена.
3. Проверка валидности JWT токена.
4. Регистрация нового пользователя.
5. Активация аккаунта пользователя.

+---+-------------------------------+-------+--------------------------------+----------------------------+
| № | URL                           | Метод | Параметр                       | Назначение                 |
+===+===============================+=======+================================+============================+
| 1 | ``api/auth/jwt/create/``      | POST  | ``{{ User.USERNAME_FIELD }}``  | Поле с именем пользователя |
|   |                               |       +--------------------------------+----------------------------+
|   |                               |       | ``password``                   | Пароль пользователя        |
+---+-------------------------------+-------+--------------------------------+----------------------------+
| 2 | ``api/auth/jwt/refresh/``     | POST  | ``refresh``                    | Refresh-токен              |
+---+-------------------------------+-------+--------------------------------+----------------------------+
| 3 | ``api/auth/jwt/verify/``      | POST  | ``token``                      | Access-токен               |
+---+-------------------------------+-------+--------------------------------+----------------------------+
| 4 | ``api/auth/users/``           | POST  | ``{{ User.USERNAME_FIELD }}``  | Поле с именем пользователя |
|   |                               |       +--------------------------------+----------------------------+
|   |                               |       | ``{{ User.REQUIRED_FIELDS }}`` | Другие требуемые поля      |
|   |                               |       +--------------------------------+----------------------------+
|   |                               |       | ``password``                   | Пароль                     |
|   |                               |       +--------------------------------+----------------------------+
|   |                               |       | ``re_password``                | Повтор пароля              |
+---+-------------------------------+-------+--------------------------------+----------------------------+
| 5 | ``api/auth/users/activation`` | POST  | ``uid``                        | ID пользователя            |
|   |                               |       +--------------------------------+----------------------------+
|   |                               |       | ``token``                      | Токен                      |
+---+-------------------------------+-------+--------------------------------+----------------------------+

Регистрация и активация аккаунта пользователя
---------------------------------------------
Чтобы получить доступ к сервису GymStrength, на нём необходимо зарегистрироваться.
Регистрация проходит по следующему сценарию:

1. Пользователь вводит свои персональные данные в форму для регистрации в компоненте ``frontend/src/views/Registration.vue``:
    * Логин;
    * E-mail;
    * Пароль.
2. Он нажимает кнопку "Зарегистрироваться", которая отправляет POST запрос №4 на сервер.
3. Сервер сохраняет эти данные в БД. Далее он генерирует письмо активации со специальной ссылкой,
   которая включает в себя ``uid`` и ``token``, и сгенерированной модулем Djoser.
4. Пользователь проверяет свою почту и переходит по ссылке, указанной в письме активации.
5. Ссылка перебрасывает пользователя на страницу активации.
6. Из URL строки на фронтенде извлекаются ``uid`` и ``token``.
7. Эти данные отправляются на сервер в виде POST запроса №5.
8. На сервере учётная запись (``User`` и ``UserProfile``) переходит в состояние ``is_active=True``.

Стоит отметить, что JWT токен по результату данной процедуры не выдаётся! После того, как
аккаунт пользователя активирован, пользователь должен войти под своим логином и паролем.
Только после входа будет выдан JWT.

Вход в систему пользователем
----------------------------
1. Пользователь вводит свои персональные данные в форму для логина:
    * Логин;
    * Пароль.
2. Он нажимает кнопку "Войти", которая отправляет POST запрос №1 на сервер.
3. Djoser принимает логин и пароль и на их основе генерирует пару токенов.
4. Токены отправляются пользователю.
5. Пользователь принимает токены и сохраняет их в ``localStorage`` браузера.

Аутентификация пользователя
---------------------------
Принцип работы JWT заключается в том, что он всегда передаётся в заголовке HTTP-запроса.
Таким образом при попытке доступа к ресурсу мы всегда сможем идентифицировать пользователя,
чтобы разрешить или запретить его действия. На фронтенде с помощью Vue-router перед загрузкой каждой страницы (``router.beforeEach``) выполняются
следующие проверки:

1. Проверяется наличие атрибута ``meta: { requiresAuth: true }``, который разграничивает страницы общего пользования и ограниченные ресуры, для которых нужна регистрация.
2. В случае, если атрибут имеется, то из ``localStorage`` берётся Access Token. Если токен не найден, то перебрасываем пользователя на страницу с регистрацией.
3. Если Access Token имеется, то отправляется POST запрос №3 на эндпоинт Djoser. Если сервер прислал ``HTTP_200_OK``, то, переходим на страницу, которую запросил пользователь.
4. Если же Djoser прислал ``HTTP_401_UNAUTHORIZED``, текущий Access Token истёк. Отправляем POST запрос №2 на эндпоинт Djoser с текущим Refresh Token'ом, чтобы получить обновлённую пару токенов: Access Token и Refresh.
5. Если сервер прислал ``HTTP_200_OK``, то обновление прошло успешно, переходим на страницу, которую запросил пользователь, предварительно записав новые токены в ``localStorage``.
6. Если же Djoser прислал ``HTTP_401_UNAUTHORIZED``, то обновить токены не удалось, так как Refresh Token тоже имеет срок активности, хоть и больший, чем у Access Token.
7. В таком случае перенаправляем пользователя на страницу с логином - при логине пользователь получит свежую пару токенов.
